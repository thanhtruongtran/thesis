import streamlit as st
import os
from web3 import Web3
import time
import pandas as pd
import requests
from datetime import datetime

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="Metamask Connect App",
    page_icon="ü¶ä",
    layout="wide"
)

# K·∫øt n·ªëi v·ªõi Web3
w3 = Web3(Web3.HTTPProvider('https://mainnet.infura.io/v3/YOUR_INFURA_KEY'))

# Kh·ªüi t·∫°o session state
if 'connected' not in st.session_state:
    st.session_state.connected = False
if 'address' not in st.session_state:
    st.session_state.address = None
if 'messages' not in st.session_state:
    st.session_state.messages = []
if 'posts' not in st.session_state:
    # Gi·∫£ l·∫≠p d·ªØ li·ªáu API
    st.session_state.posts = []

# Load CSS t·ª´ file styles.css
def load_css():
    with open("src/services/streamlit/style.css", "r") as f:
        css = f.read()
        st.markdown(f"<style>{css}</style>", unsafe_allow_html=True)

load_css()

# H√†m JavaScript ƒë·ªÉ k·∫øt n·ªëi v·ªõi Metamask
connect_script = """
<script>
async function connectWallet() {
    if (typeof window.ethereum !== 'undefined') {
        try {
            const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
            const account = accounts[0];
            
            // G·ª≠i ƒë·ªãa ch·ªâ v√≠ ƒë·∫øn Streamlit
            const data = {
                address: account,
                connected: true
            };
            
            // G·ª≠i d·ªØ li·ªáu th√¥ng qua streamlit-component-lib
            window.parent.postMessage({
                type: "streamlit:setComponentValue",
                value: JSON.stringify(data)
            }, "*");
            
        } catch (error) {
            console.error(error);
        }
    } else {
        alert('Metamask kh√¥ng ƒë∆∞·ª£c c√†i ƒë·∫∑t. Vui l√≤ng c√†i ƒë·∫∑t Metamask extension.');
    }
}
</script>

<button onclick="connectWallet()" style="
    background-color: #FF9E0D;
    color: white;
    border: none;
    border-radius: 5px;
    padding: 10px 20px;
    cursor: pointer;
    font-weight: bold;
">K·∫øt n·ªëi v·ªõi Metamask</button>
"""

# H√†m ki·ªÉm tra k·∫øt n·ªëi v√≠
def connect_wallet():
    st.components.v1.html(connect_script, height=80)
    
    # ƒê√¢y l√† hack ƒë·ªÉ ƒë·ªçc gi√° tr·ªã t·ª´ JavaScript
    component_value = st.empty()
    component_value = st.components.v1.html(
        """
        <div id="wallet_data"></div>
        <script>
        window.addEventListener('message', function(e) {
            if (e.data.type === 'streamlit:setComponentValue') {
                document.getElementById('wallet_data').innerText = e.data.value;
            }
        });
        </script>
        """,
        height=0,
    )

# H√†m ƒë·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ API
def fetch_posts_from_api():
    """
    H√†m n√†y s·∫Ω l·∫•y d·ªØ li·ªáu t·ª´ API c·ªßa b·∫°n
    Thay th·∫ø b·∫±ng URL API th·ª±c t·∫ø c·ªßa b·∫°n
    """
    try:
        # Thay th·∫ø URL n√†y b·∫±ng API c·ªßa b·∫°n
        # response = requests.get('https://your-api-endpoint.com/posts')
        # return response.json()
        
        # D·ªØ li·ªáu m·∫´u gi·∫£ l·∫≠p API
        return [
            {
                "id": "1",
                "author": "0x123...abc",
                "content": "Ch√†o m·ª´ng ƒë·∫øn v·ªõi ·ª©ng d·ª•ng Web3 Social!",
                "timestamp": "2025-03-13 10:00:00",
                "likes": 15,
                "comments": 3
            },
            {
                "id": "2",
                "author": "0x456...def",
                "content": "Web3 l√† t∆∞∆°ng lai c·ªßa internet. Blockchain mang l·∫°i s·ª± minh b·∫°ch v√† phi t·∫≠p trung cho c√°c ·ª©ng d·ª•ng v√† d·ªãch v·ª• tr·ª±c tuy·∫øn.",
                "timestamp": "2025-03-13 09:30:00",
                "likes": 27,
                "comments": 8
            },
            {
                "id": "3", 
                "author": "0x789...ghi",
                "content": "NFT v√† DeFi ƒëang thay ƒë·ªïi c√°ch ch√∫ng ta t∆∞∆°ng t√°c v·ªõi t√†i s·∫£n k·ªπ thu·∫≠t s·ªë v√† t√†i ch√≠nh.",
                "timestamp": "2025-03-13 08:45:00",
                "likes": 42,
                "comments": 12
            },
            {
                "id": "4",
                "author": "0xabc...123",
                "content": "H√¥m nay gi√° BTC ƒëang tƒÉng m·∫°nh! C·ªông ƒë·ªìng crypto r·∫•t h√†o h·ª©ng v·ªõi s·ª± ph√°t tri·ªÉn n√†y.",
                "timestamp": "2025-03-13 07:15:00",
                "likes": 38,
                "comments": 15
            },
            {
                "id": "5",
                "author": "0xdef...456",
                "content": "ƒêang nghi√™n c·ª©u v·ªÅ c√°c gi·∫£i ph√°p Layer 2 ƒë·ªÉ tƒÉng kh·∫£ nƒÉng m·ªü r·ªông cho Ethereum. C√≥ ai c√≥ kinh nghi·ªám v·ªõi Optimism ho·∫∑c Arbitrum kh√¥ng?",
                "timestamp": "2025-03-12 23:10:00",
                "likes": 19,
                "comments": 7
            }
        ]
    except Exception as e:
        st.error(f"L·ªói khi l·∫•y d·ªØ li·ªáu t·ª´ API: {e}")
        return []

# Container ch√≠nh cƒÉn gi·ªØa
st.markdown('<div class="center-container">', unsafe_allow_html=True)

# Hi·ªÉn th·ªã header ch√≠nh
st.markdown('<h1 class="main-header">·ª®ng d·ª•ng Web3 Social</h1>', unsafe_allow_html=True)

# Ph·∫ßn k·∫øt n·ªëi v√≠ (cƒÉn gi·ªØa)
# Ph·∫ßn k·∫øt n·ªëi v√≠ (ƒë∆∞·ª£c gi·ªØ l·∫°i sau khi load l·∫°i)
if not st.session_state.connected:
    st.markdown('<div style="text-align: center; margin: 20px 0;">', unsafe_allow_html=True)
    
    # N√∫t c·ªßa Streamlit
    if st.button("ü¶ä K·∫øt n·ªëi v·ªõi Metamask", key="connect_button"):
        st.session_state.connected = True
        st.session_state.address = "0x742d35Cc6634C0532925a3b844Bc454e4438f44e"
        st.rerun()
    
    st.markdown('</div>', unsafe_allow_html=True)
else:
    st.markdown(f"""
    <div style="text-align: center; margin: 20px 0;">
        <p>ƒê√£ k·∫øt n·ªëi v·ªõi v√≠: <strong>{st.session_state.address[:6]}...{st.session_state.address[-4:]}</strong></p>
        <button style="margin-top: 10px; background-color: #f44336; color: white; border: none; border-radius: 5px; padding: 5px 10px; cursor: pointer;">Ng·∫Øt k·∫øt n·ªëi</button>
    </div>
    """, unsafe_allow_html=True)
    
    # Tabs cho Feed v√† Chat
    tab1, tab2 = st.tabs(["üì± Feed", "üí¨ Chat"])
    
    # Tab Feed
    with tab1:
        st.subheader("Feed")
        
        # L·∫•y d·ªØ li·ªáu t·ª´ API
        posts = fetch_posts_from_api()
        
        # Hi·ªÉn th·ªã n√∫t l√†m m·ªõi
        col1, col2, col3 = st.columns([2, 1, 2])
        with col2:
            if st.button("üîÑ L√†m m·ªõi Feed"):
                st.rerun()

        # B·∫Øt ƒë·∫ßu container cu·ªôn cho Feed
        st.markdown('<div class="feed-container">', unsafe_allow_html=True)
        
        if not posts:
            st.info("Kh√¥ng c√≥ b√†i ƒëƒÉng n√†o. Vui l√≤ng th·ª≠ l·∫°i sau.")
        else:
            for post in posts:
                st.markdown(f"""
                <div class="post">
                    <div class="post-header">
                        <span class="post-author">{post["author"]}</span>
                        <span class="post-time">{post["timestamp"]}</span>
                    </div>
                    <div class="post-content">{post["content"]}</div>
                    <div class="post-actions">
                        <span>‚ù§Ô∏è {post["likes"]} th√≠ch</span>
                        <span>üí¨ {post["comments"]} b√¨nh lu·∫≠n</span>
                        <span>üîÅ Chia s·∫ª</span>
                    </div>
                </div>
                """, unsafe_allow_html=True)
        
        # K·∫øt th√∫c container cu·ªôn
        st.markdown('</div>', unsafe_allow_html=True)

    # Tab Chat
    with tab2:
        st.subheader("Chat")

        # B·∫ÆT ƒê·∫¶U khung Chat
        st.markdown('<div class="chat-container-fixed">', unsafe_allow_html=True)
        
        # Hi·ªÉn th·ªã c√°c tin nh·∫Øn
        for msg in st.session_state.messages:
            if msg["sender"] == st.session_state.address:
                st.markdown(f"""
                <div class="message message-sent">
                    <div><strong>B·∫°n</strong></div>
                    <div>{msg["content"]}</div>
                    <div style="text-align: right; font-size: 0.8rem; color: #606060;">{msg["timestamp"]}</div>
                </div>
                """, unsafe_allow_html=True)
            else:
                st.markdown(f"""
                <div class="message message-received">
                    <div><strong>{msg["sender"][:6]}...{msg["sender"][-4:]}</strong></div>
                    <div>{msg["content"]}</div>
                    <div style="text-align: right; font-size: 0.8rem; color: #606060;">{msg["timestamp"]}</div>
                </div>
                """, unsafe_allow_html=True)
        # K·∫æT TH√öC khung Chat
        st.markdown('</div>', unsafe_allow_html=True)
            
        with st.form(key="message_form"):
            st.markdown('<div class="chat-container">', unsafe_allow_html=True)
            col1, col2 = st.columns([9, 1])  # ƒêi·ªÅu ch·ªânh t·ª∑ l·ªá gi·ªØa input v√† n√∫t g·ª≠i
            
            with col1:
                message_content = st.text_input("", placeholder="", key="message_input")

            with col2:
                st.markdown('<div class="send-btn">', unsafe_allow_html=True)
                send_button = st.form_submit_button("üì® G·ª≠i")
                st.markdown('</div>', unsafe_allow_html=True)

            st.markdown('</div>', unsafe_allow_html=True)

            if send_button and message_content:
                new_message = {
                    "sender": st.session_state.address,
                    "content": message_content,
                    "timestamp": datetime.now().strftime("%H:%M")
                }
                st.session_state.messages.append(new_message)

                # Gi·∫£ l·∫≠p ph·∫£n h·ªìi
                if len(st.session_state.messages) % 2 == 1:
                    time.sleep(1)  # Gi·∫£ l·∫≠p ƒë·ªô tr·ªÖ
                    response_message = {
                        "sender": "0x742d35Cc6634C0532925a3b844Bc454e4438abcd",
                        "content": "C·∫£m ∆°n b·∫°n ƒë√£ nh·∫Øn tin! ƒê√¢y l√† tin nh·∫Øn t·ª± ƒë·ªông.",
                        "timestamp": datetime.now().strftime("%H:%M")
                    }
                    st.session_state.messages.append(response_message)

                st.rerun()


# Footer (cƒÉn gi·ªØa)
st.markdown("""
<div class="footer">
    <hr>
    <p>¬© 2025 ·ª®ng d·ª•ng Web3 Social | Powered by Streamlit</p>
</div>
""", unsafe_allow_html=True)

# ƒê√≥ng container ch√≠nh
st.markdown('</div>', unsafe_allow_html=True)